July 3, 2020
------------
This is my first push, mainly because I just never got around to doing it before.

The entire chess game is pretty much done. There are a few changes I will be making, but nothing major.

Currently, human, random, minimax, and alpha-beta-pruning players work. The Monte Carlo Sim player is in progress, but there are some major memory leaks in the code right now that means the program leaks roughly 180MB of memory every time tthe MCTS player makes a move.

Overall, the project is moving along well, but this memory leak is pretty major, and I'm struggling to find it.



July 6, 2020
------------
This is my second push. Since the last one, quite a lot has happened.

Most importantly, I found all of the memory leaks in the program. In total, there were quite a few (6 or 7 different leaks to be more precise). A couple stemmed from a misunderstanding on my end about how the C++ standard library containers clear memory when emptied. Another resulted from a misunderstanding on my end about how arrays work in C++. I ended up resolving this issue by just replacing all of the pointer arrays with vectors, which works much better anyways. I also had a few leaks caused by sloppy code when I was writing a patch for another issue. Those took a while to find, but I eventually fixed those as well.

As a result of the memory leak fixes, the MCTS player now functions perfectly fine, and can now be played. However, the simulation algorithm still needs some work, as it currently plays even worse than the Random player.

Also, because all of the memory issues are now resolved, I am finally starting work on the core of this entire project:  The AI player. This will be fun.

Beyond that, there isn't much else to say. I fixed a few other bugs regarding closing the game prematurely and excessive threading. The only "major" issue is more of an inconvience: The game occasionally flickers randomly, and the cause is currently unknown. However, that isn't really that significant, at least for now.

Overall, I have made some decent progress in the past few days. A little bit more to implement the networks, and then I'm pretty much done (except for training of course).



July 27, 2020
-------------
Since the last push, I have had some major progress.

A) The network is set up as a basic MLP with Gradient Descent/Backprop training. Eventually, I would like to set up NEAT, Q-Learning, or even CNNs for more effective training. However, the network *can* train now.

B) Major Code Cleanup: Formatting, Coding Style, etc.

C) Switch to CMake over hardcoded makefile

Now it's time to train!!



July 31, 2020
-------------
No, it wasn't quite time to train yet.

Changes:
 - Network dump now actually works (doesn't hit max string size limit, etc.)
 - Training logic has been completed
 - Network dump implementation details have been finialized (kinda)
 - Minor changes to MCTS algorithm
 - Added missing #includes to allow for program to compile with GCC (https://gcc.gnu.org/)

I've already had some minor success training the network. However, it's slow going, and, while training, my computer becomes a hot stove. I'm going to need to find a better way to train this network...



August 3, 2020
--------------
Minor changes to code/readme



August 6, 2020
--------------
Now training should work??!?!!??!?!

Changes:
  - Fixed segfault caused by illegal move attempt/nullptr dereferencing
  - Fixed nan weights/priorities for MCTS tree nodes
  - Fixed network returning values so large that exp(res) was overflowing to inf
  - Updated CMakeLists.txt (forgot to do that last time!!)

Now this should be able to train



August 10, 2020
---------------
Update to CMakeLists.txt to work better out of the box
  - Now all dependencies can be installed (ie with homebrew) and then CMake will automatically find the files to link with using pkg-config



August 15, 2020
---------------
Debugging update



August 16, 2020
---------------
Debugging update



August 23, 2020
---------------
Upgrade to training -> More aggressive training reps, more aggressive mcts, stored training cases, sharper targets, etc.
Updated debugging tools -> Stack trace
Better usability -> Tries to automatically detect correct working directory + can be given absolute path as argument
General code cleanup



August 27, 2020
---------------
Fixed board/double output print
Better usability -> easier to configure parameters for MCTS, training, etc.



August 28, 2020
---------------
Fixed bug where game could not run without graphics
Made initial paramter configuration easier



September 4, 2020
-----------------
Upgraded graphics -> less glitchy, support for multiple overlays on a single cell
Extra debugging asserts and changes to try to track down MCTS training crashes



September 7, 2020
-----------------
Extra debugging asserts and changes to try to track down MCTS training crashes
Improved MCTS logic
Better training strategies
Cleaned up player code
Reinstated 50 move stalemate (raised to 250) to prevent infinite loop in drawn gamestates